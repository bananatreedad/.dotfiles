" plugin section *yaayy*
call plug#begin('~/.vim/plugged')

" General
Plug 'benekastah/neomake'
Plug 'scrooloose/nerdtree' "finder in vim
Plug 'jistr/vim-nerdtree-tabs' "allows to have only one tree and multiple tabs
Plug 'chriskempson/base16-vim' " colorschemes
Plug 'kien/ctrlp.vim' " fuzzy finder
Plug 'vim-airline/vim-airline' " fancy statusline
Plug 'vim-airline/vim-airline-themes' " themes for vim-airline
Plug 'mattn/emmet-vim' "emmet makes html easy
Plug 'vim-syntastic/syntastic' "syntax highlighting for a lot of languages
Plug 'Chiel92/vim-autoformat' " autoformat plugin

call plug#end()

""""""""""""""""""""""""""

""""""""""""""""""""""""""
"       General
""""""""""""""""""""""""""

" set number " show line numbers
" set relativenumber " show relative line numbers
set number " show the current line number"

set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking

set autoindent " automatically set indent of new line
set smartindent

set clipboard=unnamed

let mapleader = ','
let g:mapleader = ','

if has('mouse')
    set mouse=a
endif

set autoread "detect when the file is changed
set nocompatible " not compatible with vi

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos


set history=1000    "set history to 1000
set textwidth=100
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
set incsearch       " do incremental searching

" Tab control
set expandtab       " insert tabs rather than spaces for <Tab>
set smarttab        " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4       " the visible width of tabs
set softtabstop=4   " edit as if the tabs are 4 characters wide
set shiftwidth=4    " number of spaces to use for indent and unindent
set shiftround      " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" faster redrawing
set ttyfast

""""""""""""""""""""""""""
"      User Interface
""""""""""""""""""""""""""
set so=7 " set 7 lines to the cursors - when moving vertical

set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set cmdheight=1 " command bar height

""""""""""""""""""""""""""""""
"       Files, backups etc.
""""""""""""""""""""""""""""""


"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

""""""""""""""""""""""""""""""
"     StatusLine
""""""""""""""""""""""""""""""

"Set the status line options. Make it show more information.
set laststatus=2

"set line no, buffer, search, highlight, autoindent and more.
set nu
set incsearch
set smartcase
set showmatch
set autoindent
set vb
set viminfo+=n$VIM/_viminfo
set undolevels=1000

" remap esc
inoremap jj <esc>

"disable Ex mode
noremap Q <NOP>"

" wipout buffer
nmap <silent> <leader>b :bw<cr>

" shortcut to save
nmap <leader>, :w<cr>

nmap <leader>q :q<cr>
"quit current window
nmap <leader>Q :qa!<cr>
"quit all windows

vnoremap <leader>s :sort<cr>

" set paste toggle
set pastetoggle=<F6>


" toggle paste mode
map <leader>v :set paste!<cr>

" edit ~/.vimrc
map <leader>ev :e! ~/.dotfiles/nvimrc.link<cr>
" edit ~/.zshrc
map <leader>ez :e! ~/.zshrc<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>
" edit tmux config
map <leader>et :e! ~/.tmux.conf<cr>

" clear highlighted search
noremap <space> :set hlsearch! hlsearch?<cr>

"indentation as you would expect it to be
vnoremap < <gv
vnoremap > >gv

"split the right way
map <leader>\| :vs<cr>
map <leader>- :sp<cr>
" toggle invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>sl :set list!<cr>


" switch between current and last buffer
nmap <leader>. <c-^>

" enabl . command in visual mode
vnoremap . :normal .<cr>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" search for word under the cursor
nnoremap <leader>/ "fyiw :/<c-r>f<cr>

"without the following the C-h shortcut won't work on nvim
"see https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-W>h
endif

map <silent> <C-h> :wincmd h<cr>
map <silent> <C-j> :wincmd j<cr>
map <silent> <C-k> :wincmd k<cr>
map <silent> <C-l> :wincmd l<cr>

"map <leader>r :call RunCustomCommand()<cr>
let g:silent_custom_command = 0

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

if bufwinnr(1)
    noremap <silent> <S-H> :vertical resize +3<CR>
    noremap <silent> <S-L> :vertical resize -3<CR>
    noremap <silent> <S-J> :resize +3<CR>
    noremap <silent> <S-K> :resize -3<CR>
endif

""""""""""""""""""""""""
"       Plugins
""""""""""""""""""""""""

"Plug 'chriskempson/base16-vim' " colorschemes
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

"""""""""""""""""""""""""""
"Plug 'scrooloose/nerdtree'
"""""""""""""""""""""""""""

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" remove some files by extension
"let NERDTreeIgnore = ['\.js.map$']
" Toggle NERDTree
map <Leader>k <plug>NERDTreeTabsToggle<CR>

" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

let g:NERDTreeWinPos = "right"

""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-airline/vim-airline' " fancy statusline
""""""""""""""""""""""""""""""""""""""""""""""""""

" airline options
"let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='base16'

"""""""""""""""""""""""""""
Plug 'kien/ctrlp.vim' " fuzzy finder
"""""""""""""""""""""""""""

" map fuzzyfinder (CtrlP) plugin
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = 'find %s -type f' " MacOSX/Linux

"syntastic

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
