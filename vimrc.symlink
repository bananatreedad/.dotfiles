set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" colorschemes
Plugin 'chriskempson/base16-vim'

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'benmills/vimux' " tmux integration for vim
Plugin 'vim-airline/vim-airline' " fancy statusline
Plugin 'vim-airline/vim-airline-themes' " themes for vim-airline

" plugin to comment
Plugin 'tomtom/tcomment_vim'
"tree plugin
Plugin 'scrooloose/nerdtree'
"statusbar
"Plugin 'itchyny/lightline.vim'
"show colors picker
Plugin 'Rykka/colorv.vim'
"latex build & show
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'kien/ctrlp.vim'
"deliminate for bracket closing
Plugin 'Raimondi/delimitMate'
Plugin 'Chiel92/vim-autoformat'
Plugin 'Valloric/YouCompleteMe'

Plugin 'tpope/vim-fugitive' " amazing git wrapper for vim
Plugin 'scrooloose/syntastic' "syntax checker

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" ---------------------------------
"
""""""""""""""""""""""""""
"       General
""""""""""""""""""""""""""
set autoread "detect when the file is changed
set nocompatible " not compatible with vi

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','


set history=1000	"set history to 1000
set textwidth=120
set ruler			" show the cursor position all the time
set showcmd			" display incomplete commands
set incsearch		" do incremental searching

" Tab control
set noexpandtab		" insert tabs rather than spaces for <Tab>
set smarttab		" tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4		" the visible width of tabs
set softtabstop=4	" edit as if the tabs are 4 characters wide
set shiftwidth=4	" number of spaces to use for indent and unindent
set shiftround		" round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

set clipboard=unnamed

" faster redrawing
set ttyfast


""""""""""""""""""""""""""
"      User Interface
""""""""""""""""""""""""""
set so=7 " set 7 lines to the cursors - when moving vertical

set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest:full " complete files like a shell
set scrolloff=3 " lines of text around cursor
set shell=$SHELL

set cmdheight=1 " command bar height

set title " set terminal title

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter

set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500


" switch syntax highlighting on
syntax on

set encoding=utf8
let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"
execute "set background=".$BACKGROUND
execute "colorscheme ".$THEME

" set number " show line numbers
" set relativenumber " show relative line numbers
set number " show the current line number"

set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking

set autoindent " automatically set indent of new line
set smartindent


""""""""""""""""""""""""""""""
"		Files, backups etc.
""""""""""""""""""""""""""""""


"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp


""""""""""""""""""""""""""""""
"     StatusLine
""""""""""""""""""""""""""""""

"Set the status line options. Make it show more information.
set laststatus=2

"set line no, buffer, search, highlight, autoindent and more.
set nu
set incsearch
set smartcase
set showmatch
set autoindent
set vb
set viminfo+=n$VIM/_viminfo
set undolevels=1000

""""""""""""""""""""""""""
"       Mappings
""""""""""""""""""""""""""

" remap esc
inoremap jj <esc>

"disable Ex mode
noremap Q <NOP>"

" markdown to html
nmap <leader>md :%!markdown --html4tags <cr>

" remove extra whitespace
nmap <leader><space> :%s/\s\+$<cr>

" wipout buffer
nmap <silent> <leader>b :bw<cr>

" shortcut to save
nmap <leader>, :w<cr>

" set paste toggle
set pastetoggle=<F6>


" toggle paste mode
map <leader>v :set paste!<cr>

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
" edit ~/.zshrc
map <leader>ez :e! ~/.zshrc<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>
" edit tmux config
map <leader>et :e! ~/.tmux.conf<cr>

" clear highlighted search
noremap <space> :set hlsearch! hlsearch?<cr>

" toggle invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>sl :set list!<cr>

" Textmate style indentation
vmap <leader>[ <gv
vmap <leader>] >gv
nmap <leader>[ <<
nmap <leader>] >>

" switch between current and last buffer
nmap <leader>. <c-^>

" enabl . command in visual mode
vnoremap . :normal .<cr>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" search for word under the cursor
nnoremap <leader>/ "fyiw :/<c-r>f<cr>

map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>

"map <leader>r :call RunCustomCommand()<cr>
let g:silent_custom_command = 0

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

if bufwinnr(1)
	noremap <silent> <S-H> :vertical resize +3<CR>
	noremap <silent> <S-L> :vertical resize -3<CR>
	noremap <silent> <S-J> :resize +3<CR>
	noremap <silent> <S-K> :resize -3<CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
	let t:curwin = winnr()
	exec "wincmd ".a:key
	if (t:curwin == winnr())
		if (match(a:key,'[jk]'))
			wincmd v
		else
			wincmd s
		endif
		exec "wincmd ".a:key
	endif
endfunction

" execute a custom command
function! RunCustomCommand()
	up
	if g:silent_custom_command
		execute 'silent !' . s:customcommand
	else
		execute '!' . s:customcommand
	endif
endfunction

function! SetCustomCommand()
	let s:customcommand = input('Enter Custom Command$ ')
endfunction

function! TrimWhiteSpace()
	%s/\s\+$//e
endfunction

""""""""""""""""""""""""""
"      Plugin
"""""""""""""""""""""""""


let g:syntastic_mode_map = { 'passive_filetypes': ['tex'] }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

map <leader>af :Autoformat<cr>
"Latex Box
let g:LatexBox_latexmk_options = "-pdf -output-directory=build"

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" remove some files by extension
"let NERDTreeIgnore = ['\.js.map$']
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" map fuzzyfinder (CtrlP) plugin
" nmap <silent> <leader>t :CtrlP<cr>
nmap <silent> <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" airline options
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='base16'

if (has("gui_running"))
	set guioptions=egmrt
	set background=light
	colorscheme solarized
	let g:airline_left_sep=''
	let g:airline_right_sep=''
	let g:airline_powerline_fonts=0
	let g:airline_theme='solarized'
endif
